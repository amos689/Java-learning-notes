/*
    方法的语法结构
    [修饰符列表] 返回值类型 方法名 (形式参数列表) {
        方法体;
    }
    1.修饰符列表：public static（可选项，非必须）以后详细讲
        方法修饰符列表有static关键字的话，调用时
            类名.方法名(实际参数列表)
    2.返回值
        * 什么是返回值：一个方法时可以完成某个特定功能的，这个功能大多数都是需要返回
          最终执行结果的。执行结果可能是一个具体存在的数据，这个数据就是返回值
        * 返回值类型：返回值是一个具体存在的数据，数据都是有类型的，此处需要指定的是
          返回值的具体类型
        * 返回值可以是哪些类型：任何Java类型都可以，包括基本数据类型和所有引用数据类型
          也可以没有（void），且void不能省略
        * 只要带有return关键字的语句执行，return语句所在的方法结束，不是JVM结束
    3.方法名
        * 合法的标识符就行
        * 最好见名知义
        * 首字母小写，遵循驼峰命名法
    4.形式参数
        * 形参是局部变量
        * 形参的个数可以是0-n个，多个形参直接用","隔开，形参起决定作用的是
          形参的数据类型，形参的名字就是局部变量的名字
        * 方法在调用的时候实际给这个方法传递的真实数据被称为实际参数，简称实参
        * 实参列表和形参列表必须满足：数量相同，类型对应相同
    5.方法体必须由大括号括起来。方法体中的代码从上到下执行，以;结束
*/
/*
    * 方法在只定义不调用的时候是不执行的
    * 调用规则：类名.方法名(是参列表);
    * 表示调用某个类的某个方法，传递这样的实参
*/
public class _04Method02 {
    /*
        * public：公开的
        * static：静态的
        * void：方法结束后不返回值
        * main：主方法
        * (String[] args)：String[]是一种引用数据类型，args是局部变量的变量名
        * 所以只有args这个局部变量变量名是随意的
        * 主方法是这样固定编写的
    */
    public static void main(String[] args) {
        java.util.Scanner s = new java.util.Scanner(System.in);
        System.out.print("请输入两个整型变量");
        int a = s.nextInt();
        int b = s.nextInt();
        _04Method01.sumInt(a, b); // 调用在_4Method01类的sumInt方法
    }
}
