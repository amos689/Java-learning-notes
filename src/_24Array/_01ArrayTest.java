package _24Array;

/*
    Array
        1.Java语言中的数组是一种引用数据类型, 不属于基本数据类型. 数组的父类是Object
        2.数组实际上是一个容器, 可以同时容纳多个元素(数组是一个数据的集合)
        3.数组当中既可以存储基本数据类型的数据, 也可以存储引用数据类型的数据
        4.数组因为是引用类型, 所以数组对象是在堆内存当中的(数组是存储在堆当中的)
        5.数组当中如果存储的是Java对象的话, 实际上存储的是对象的引用(内存地址)
        6.数组一旦创建, Java中规定长度不可变(数组长度不可变)
        7.数组的分类包括一维数组, 二维数组, 三维数组, 多维数组
        8.所有数组对象都有length属性, 用来获取数组中元素的个数
        9.Java中的数组要求数组中的元素类型统一: int只能存int, person只能存person
        10.数组在内存方面存储的时候, 数组的元素内存地址是连续的, 这是数组存储元素的特点
        11.所有数组都是那"第一个小方块的内存地址"作为数组对象的内存地址(数组中首元素内存地址作为整个数组对象的内存地址)
        12.数组中每个元素都是有下标的, 从0开始, 最后一个的下标是length - 1
           我们对数组元素进行存取的时候, 都需要通过下标来进行
        13.int[] array1 = 0x11 int[]是引用数据类型, 0x11是堆中数组对象的内存地址
        14.这种数据结构的优点和缺点是什么:
            优点: 查询/查找/检索某个下标元素时效率极高. 可以说是查询效率最高的数据结构
                 为什么效率高:
                    1.每一个元素的内存地址在空间存储上是连续的
                    2.每个元素类型相同, 占用空间大小引用
                    3.知道第一个元素的地址, 知道每一个元素占用空间的大小, 又知道下标,
                      通过一个"数学表达式"就可以计算出某个下标上元素的内存地址, 直接定位元素
            缺点:
                1.由于为了保证数组中每个元素的内存地址连续, 所以在数组是随机删除或者增加
                  元素时效率较低, 因为随机删除或者增加元素会牵扯到后面元素统一向前或者向后位移
                2.数组不能存储大数据量, 因为很难在内存空间上找到一块特别大的连续的内存空间
             ps: 对于最后一个元素的增删, 是对效率没有影响的
        15.怎么声明/定义一个数组
            语法格式:
                int[] array1;
                double[] array2;
                String[] array3;
                Object[] array4;
        16.怎么初始化一个一维数组呢(两种方式)
            1.静态初始化
                int[] array = {100, 200, 300};
            2.动态初始化
                //初始化5个长度的int类型数组, 每个元素默认值为0
                int[] array = new int[5]; //这里的5表示数组的元素个数
                //初始化6个长度的String类型的数组, 每个元素默认值null
                String[] names = new String[6];
 */
public class _01ArrayTest {
    public static void main(String[] args) {
        //使用静态初始化的方式, 声明int类型的数组
        int[] a1 = {1, 100, 10, 20, 55, 689};
        //所有的数组对象都有length属性(不是方法, 不用加"()")
        System.out.println("数组中元素的个数是: " + a1.length);
        //数组中每一个元素都有下标, 通过下标对元素进行存取
        System.out.println("第一个元素是: " + a1[0]);
        System.out.println("最后一个元素是: " + a1[a1.length - 1]);
        //存(改)第一个元素
        a1[0] = 111;
        System.out.println("第一个元素现在是: " + a1[0]);
        //一维数组怎么便利呢
        for(int i = 0; i < a1.length; i++) {
            System.out.println(a1[i]);
        }
        //初始化一个Object类型的数组, 采用动态初始化的方式
        Object[] objs = {new Object(), new Object(), new Object()};
        for(int i = 0; i < objs.length; i++) {
            System.out.println(objs[i].toString());
        }
        //下标越界会发生什么
        //System.out.println(a1[6]); //java.lang.ArrayIndexOutOfBoundsException数组下标越界异常
        //逆序遍历
        for(int i = a1.length - 1; i >= 0; i--) {
            System.out.println("逆序输出: " + a1[i]);
        }
    }
}
