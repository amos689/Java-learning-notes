package _14Override;

/*
    IDEA: ctrl + o 进行覆盖
    回顾方法的重载
        1.方法的重载又被称为Overload
        2.方法重载什么时候使用: 在同一个类中, 方法完成的功能是相似的时
        3.什么时候构成方法重载
            * 在同一个类中
            * 方法名相同
            * 参数列表不同: 类型/顺序/个数
        4.方法重载和什么无关
            * 和返回值无关
            * 和修饰符列表无关
    关于Java语言中的方法的覆盖
        1.方法覆盖又被称为方法重写, 英语单词override[官方]/overwrite
        2.什么时候使用方法重写
          当父类中的方法已经无法妈祖当前子类的业务需求, 子类有必要将父类中继承过来的方法进行重写
          这个重写的过程称为方法的覆盖
        3.什么条件满足后发生方法重写
            * 方法重写发生在具有继承关系的父子类之间
            * 方法名相同, 返回值类型相同
            * 形参列表相同
            * 访问权限不能更低, 只能更高(如果父类public, 子类就不能private)
            * 抛出异常可以更少, 不能更多
        4.建议方法重写的时候尽量复制粘贴

        5.注意:
            私有方法不能继承, 所以不能覆盖
            构造方法不能继承, 所以不能覆盖
            静态方法不存在覆盖(讲完多态)
            覆盖只针对方法, 不谈属性
 */
public class _01OverrideTest {
    public static void main(String[] args) {
        //创建动物对象
        _02Animal a = new _02Animal();
        a.move();
        /*
        此段代码全部输出动物在移动
        //创建猫科类动物对象
        _03Cat c = new _03Cat();
        c.move();
        //创建飞禽类动物对象
        _04Bird b = new _04Bird();
        b.move();
        但是我们需要更具体的, 不想只说移动, 这就需要方法覆盖
        */
        _03Cat c = new _03Cat();
        c.move();
        _04Bird b = new _04Bird();
        b.move();
    }

}
